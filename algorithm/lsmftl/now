helper_algorithm/bf_set.c:92://	bfs->bf_array[
helper_algorithm/bf_set.c:93:	if(bfs->now>=bfs->max) {
helper_algorithm/bf_set.c:98:	switch(bfs->type){
helper_algorithm/bf_set.c:101:				printf("%u is inser bfs->now:%u\n", debug_lba, bfs->now);
helper_algorithm/bf_set.c:103:			cbf_put_lba(((bp_pair*)bfs->array)[bfs->now].bf, lba);
helper_algorithm/bf_set.c:104:			((bp_pair*)(bfs->array))[bfs->now].piece_ppa=piece_ppa;
helper_algorithm/bf_set.c:105:			bfs->memory_usage_bit+=
helper_algorithm/bf_set.c:106:				((bp_pair*)bfs->array)[bfs->now].bf->bits+48;
helper_algorithm/bf_set.c:110:				printf("%u is inser bfs->now:%u\n", debug_lba, bfs->now);
helper_algorithm/bf_set.c:112:			cbf_put_lba(((c_bf**)(bfs->array))[bfs->now], lba);
helper_algorithm/bf_set.c:113:			bfs->memory_usage_bit+=
helper_algorithm/bf_set.c:114:				((c_bf**)bfs->array)[bfs->now]->bits;
helper_algorithm/bf_set.c:117:	bfs->now++;
helper_algorithm/bf_set.c:124:	int32_t i=*last_idx==UINT32_MAX?bfs->now:*last_idx;
helper_algorithm/bf_set.c:128:	switch(bfs->type){
helper_algorithm/bf_set.c:132:				if(cbf_check_lba(((bp_pair*)bfs->array)[i].bf,lba)){
helper_algorithm/bf_set.c:133:					return ((bp_pair*)bfs->array)[i].piece_ppa;
helper_algorithm/bf_set.c:140:				if(cbf_check_lba(((c_bf**)bfs->array)[i], lba)){
helper_algorithm/bf_set.c:183:	if(bfs->array){
helper_algorithm/bf_set.c:185:		switch(bfs->type){
helper_algorithm/bf_set.c:187:				for(; i<bfs->max; i++){
helper_algorithm/bf_set.c:188:					cbf_free(((bp_pair*)bfs->array)[i].bf);
helper_algorithm/bf_set.c:192:				for(; i<bfs->max; i++){
helper_algorithm/bf_set.c:193:					cbf_free(((c_bf**)bfs->array)[i]);
helper_algorithm/bf_set.c:197:		free(bfs->array);
